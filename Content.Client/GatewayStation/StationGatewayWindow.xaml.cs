using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.GatewayStation;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Numerics;
using Content.Client.Pinpointer.UI;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Medical.SuitSensor;
using Content.Shared.StatusIcon;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.GatewayStation;

[GenerateTypedNameReferences]
public sealed partial class StationGatewayWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;
    private readonly SpriteSystem _spriteSystem;

    private NetEntity? _trackedEntity;
    private Texture? _ringTexture;

    public StationGatewayWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _spriteSystem = _entManager.System<SpriteSystem>();

        NavMap.TrackedEntitySelectedAction += SetTrackedEntityFromNavMap;
    }

    public void Set(string stationName, EntityUid? mapUid)
    {
        _ringTexture = _spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/ring.png")));

        if (_entManager.TryGetComponent<TransformComponent>(mapUid, out var xform))
            NavMap.MapUid = xform.GridUid;
        else
            NavMap.Visible = false;

        StationName.AddStyleClass("LabelBig");
        StationName.Text = stationName;
        NavMap.ForceNavMapUpdate();
    }

    public void ShowGateways(List<StationGatewayStatus> gateways, EntityUid monitor, EntityCoordinates? monitorCoords)
    {
        ClearOutDatedData();

        //No gateways
        if (gateways.Count == 0)
        {
            NoGatewayLabel.Visible = true;
            return;
        }

        NoGatewayLabel.Visible = false;

        // Show all gateways
        foreach (var gate in gateways)
        {
            var coordinates = _entManager.GetCoordinates(gate.Coordinates);

            var gatewayButton = new GatewayButton()
            {
                GatewayUid = gate.GatewayUid,
                Coordinates = coordinates,
                HorizontalExpand = true,
            };

            if (gate.GatewayUid == _trackedEntity)
                gatewayButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);

            GatewaysTable.AddChild(gatewayButton);

            // Primary container to hold the button UI elements
            var mainContainer = new BoxContainer()
            {
                Orientation = LayoutOrientation.Horizontal,
                HorizontalExpand = true,
            };

            gatewayButton.AddChild(mainContainer);


            // User status container
            var statusContainer = new BoxContainer()
            {
                SizeFlagsStretchRatio = 1.25f,
                Orientation = LayoutOrientation.Horizontal,
                HorizontalExpand = true,
            };

            mainContainer.AddChild(statusContainer);

            //Add gateway coordinates to the navmap
            if (coordinates != null && NavMap.Visible && _ringTexture != null)
            {
                NavMap.TrackedEntities.TryAdd(gate.GatewayUid,
                    new NavMapBlip(
                        coordinates.Value,
                        _ringTexture,
                        Color.Aqua,
                        true,
                        true));

                NavMap.Focus = _trackedEntity;

                gatewayButton.OnButtonUp += args =>
                {
                    var prevTrackedEntity = _trackedEntity;

                    if (_trackedEntity == gate.GatewayUid)
                    {
                        _trackedEntity = null;
                    }
                    else
                    {
                        _trackedEntity = gate.GatewayUid;
                        NavMap.CenterToCoordinates(coordinates.Value);
                    }

                    NavMap.Focus = _trackedEntity;

                    UpdateGatewaysTable(_trackedEntity, prevTrackedEntity);
                };
            }
        }
    }

    private void SetTrackedEntityFromNavMap(NetEntity? netEntity)
    {
        var prevTrackedEntity = _trackedEntity;
        _trackedEntity = netEntity;

        if (_trackedEntity == prevTrackedEntity)
            prevTrackedEntity = null;

        NavMap.Focus = _trackedEntity;

        UpdateGatewaysTable(_trackedEntity, prevTrackedEntity);
    }

    private void ClearOutDatedData()
    {
        GatewaysTable.RemoveAllChildren();
        NavMap.TrackedCoordinates.Clear();
        NavMap.TrackedEntities.Clear();
    }

    private void UpdateGatewaysTable(NetEntity? currTrackedEntity, NetEntity? prevTrackedEntity)
    {
        foreach (var gate in GatewaysTable.Children)
        {
            if (gate is not GatewayButton)
                continue;

            var castGate = (GatewayButton)gate;

            if (castGate.GatewayUid == prevTrackedEntity)
                castGate.RemoveStyleClass(StyleNano.StyleClassButtonColorGreen);

            if (castGate.GatewayUid == currTrackedEntity)
                castGate.AddStyleClass(StyleNano.StyleClassButtonColorGreen);

            if (castGate?.Coordinates == null)
                continue;

            if (NavMap.TrackedEntities.TryGetValue(castGate.GatewayUid, out var data))
            {
                data = new NavMapBlip(
                    data.Coordinates,
                    data.Texture,
                    Color.Aqua,
                    true,
                    true);

                NavMap.TrackedEntities[castGate.GatewayUid] = data;
            }
        }
    }
}
public sealed class GatewayButton : Button
{
    public int IndexInTable;
    public NetEntity GatewayUid;
    public EntityCoordinates? Coordinates;
}
