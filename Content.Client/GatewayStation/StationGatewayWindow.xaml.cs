using Content.Client.Message;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.GatewayStation;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Content.Client.Pinpointer.UI;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.GatewayStation;

[GenerateTypedNameReferences]
public sealed partial class StationGatewayWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;
    private readonly SpriteSystem _spriteSystem;

    public event Action<NetEntity?>? SendGatewayLinkChangeAction;

    private NetEntity? _trackedEntity;
    private Texture? _ringTexture;

    public StationGatewayWindow(StationGatewayBoundUserInterface userInterface)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _spriteSystem = _entManager.System<SpriteSystem>();

        NavMap.TrackedEntitySelectedAction += SetTrackedEntityFromNavMap;

        SendGatewayLinkChangeAction += userInterface.SendGatewayLinkChangeMessage;
    }

    public void Set(string stationName, EntityUid? mapUid)
    {
        _ringTexture = _spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/ring.png")));

        if (_entManager.TryGetComponent<TransformComponent>(mapUid, out var xform))
            NavMap.MapUid = xform.GridUid;
        else
            NavMap.Visible = false;

        StationName.AddStyleClass("LabelBig");
        StationName.Text = stationName;
        NavMap.ForceNavMapUpdate();
    }

    public void ShowGateways(List<StationGatewayStatus> gateways, EntityUid monitor, EntityCoordinates? monitorCoords)
    {
        ClearOutDatedData();

        //No gateways
        if (gateways.Count == 0)
        {
            NoGatewayLabel.Visible = true;
            return;
        }

        NoGatewayLabel.Visible = false;


        // Show all gateways
        foreach (var gate in gateways)
        {
            var coordinates = _entManager.GetCoordinates(gate.Coordinates);

            // Primary container to hold the button UI elements
            var panelContainer = new PanelContainer()
            {
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                HorizontalExpand = true,
                Margin = new Thickness(10),
                PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = new Color(30, 30, 34),
                    BorderColor = Color.Black,
                    BorderThickness = new(2),
                },
            };

            GatewaysTable.AddChild(panelContainer);

            var mainBox = new BoxContainer()
            {
                Orientation = LayoutOrientation.Vertical,
                HorizontalExpand = true,
            };

            panelContainer.AddChild(mainBox);

            // Gate name
            var nameLabel = new RichTextLabel()
            {
                HorizontalExpand = true,
                HorizontalAlignment = HAlignment.Center,
                Margin = new Thickness(0, 5),
            };
            nameLabel.SetMarkup($"[bold]{gate.Name}[/bold]");

            mainBox.AddChild(nameLabel);

            //Left subpart
            var leftBox = new BoxContainer()
            {
                SetWidth = 30,
                Orientation = LayoutOrientation.Vertical,
                HorizontalExpand = true,
            };

            mainBox.AddChild(leftBox);

            //Right subpart
            var rightBox = new BoxContainer()
            {
                Orientation = LayoutOrientation.Vertical,
                HorizontalExpand = true,
            };

            mainBox.AddChild(rightBox);

            // Centering button
            var centerButton = new GatewayButton()
            {
                //Text = gate.LinkCoordinates is null ? Loc.GetString("gateway-console-user-interface-start-connection") : Loc.GetString("gateway-console-user-interface-cut-connection"),
                Text = Loc.GetString("gateway-console-user-interface-locate"),
                GatewayUid = gate.GatewayUid,
                Coordinates = coordinates,
                HorizontalAlignment = HAlignment.Right,
                SetWidth = 200f,
            };

            if (gate.GatewayUid == _trackedEntity)
                centerButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);

            rightBox.AddChild(centerButton);

            //Add gateway coordinates to the navmap
            if (coordinates != null && NavMap.Visible && _ringTexture != null)
            {
                NavMap.TrackedEntities.TryAdd(gate.GatewayUid,
                    new NavMapBlip(
                        coordinates.Value,
                        _ringTexture,
                        Color.Aqua,
                        true,
                        true));

                NavMap.Focus = _trackedEntity;

                centerButton.OnButtonUp += args =>
                {
                    var prevTrackedEntity = _trackedEntity;

                    if (_trackedEntity == gate.GatewayUid)
                    {
                        _trackedEntity = null;
                    }
                    else
                    {
                        _trackedEntity = gate.GatewayUid;
                        NavMap.CenterToCoordinates(coordinates.Value);
                    }

                    NavMap.Focus = _trackedEntity;

                    UpdateGatewaysTable(_trackedEntity, prevTrackedEntity);
                };
            }

            // Link\Unlink button
            var linkButton = new GatewayButton()
            {
                Text = gate.LinkCoordinates is null ? Loc.GetString("gateway-console-user-interface-start-connection") : Loc.GetString("gateway-console-user-interface-cut-connection"),
                GatewayUid = gate.GatewayUid,
                HorizontalAlignment = HAlignment.Right,
                SetWidth = 200f,
            };
            linkButton.OnButtonUp += _ =>
            {
                SendGatewayLinkChangeAction?.Invoke(gate.GatewayUid);
            };
            rightBox.AddChild(linkButton);

            //Add gateways links lines
            if (gate.Coordinates is not null && gate.LinkCoordinates is not null)
            {
                var coordsOne = _entManager.GetCoordinates(gate.Coordinates);
                var coordTwo = _entManager.GetCoordinates(gate.LinkCoordinates);
                if (coordsOne is not null && coordTwo is not null)
                {
                    NavMap.LinkLines.Add(new GatewayLinkLine(coordsOne.Value, coordTwo.Value));
                }
            }
        }
    }

    private void SetTrackedEntityFromNavMap(NetEntity? netEntity)
    {
        var prevTrackedEntity = _trackedEntity;
        _trackedEntity = netEntity;

        if (_trackedEntity == prevTrackedEntity)
            prevTrackedEntity = null;

        NavMap.Focus = _trackedEntity;

        UpdateGatewaysTable(_trackedEntity, prevTrackedEntity);
    }

    private void ClearOutDatedData()
    {
        GatewaysTable.RemoveAllChildren();
        NavMap.TrackedCoordinates.Clear();
        NavMap.TrackedEntities.Clear();
        NavMap.LinkLines.Clear();
    }

    private void UpdateGatewaysTable(NetEntity? currTrackedEntity, NetEntity? prevTrackedEntity)
    {
        foreach (var gate in GatewaysTable.Children)
        {
            if (gate is not GatewayButton)
                continue;

            var castGate = (GatewayButton)gate;

            if (castGate.GatewayUid == prevTrackedEntity)
                castGate.RemoveStyleClass(StyleNano.StyleClassButtonColorGreen);

            if (castGate.GatewayUid == currTrackedEntity)
                castGate.AddStyleClass(StyleNano.StyleClassButtonColorGreen);

            if (castGate?.Coordinates == null)
                continue;

            if (NavMap.TrackedEntities.TryGetValue(castGate.GatewayUid, out var data))
            {
                data = new NavMapBlip(
                    data.Coordinates,
                    data.Texture,
                    Color.Aqua,
                    true,
                    true);

                NavMap.TrackedEntities[castGate.GatewayUid] = data;
            }
        }
    }
}
public sealed class GatewayButton : Button
{
    public int IndexInTable;
    public NetEntity GatewayUid;
    public EntityCoordinates? Coordinates;
}
